@model MinutasManage.Areas.Admin.Models.ConfiguracionCorreo

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Outlock Base</title>
    <link rel="stylesheet" href="/Modifi/style.css">
    <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons">
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined" />
</head>
<body>
    <header>
        <div id="titulo">
            <button class="menu">
                <img id="imgMenu" src="/Modifi/588a64e0d06f6719692a2d10.png" alt="" srcset="">
            </button>
            <img src="/Modifi/logotec (weld).png">
            <div>
                <h1>MINUTAS</h1>
                <p>Luis Carlos Esteban Longares Vidal</p>
            </div>
        </div>
        <div id="seccion">
            <input type="search" placeholder="">
            <i id="buscar" class="material-icons">search</i>
        </div>
    </header>
    <div class="content">
        <aside class="sidebar">
            <a id="apartado-minutas" href="/Admin/Home">Minutas</a>

            @if (User.IsInRole("administrador"))
            {
                <a id="apartado-empleados" href="/Admin/Empleado">Empleados</a>
                <a id="apartado-departamentos" href="/Admin/Departamento">Departamentos</a>
                <a id="apartado-configuracion" href="/Admin/Configuracion" class="material-icons">settings</a>
            }
            <a id="apartado-perfil" href="/Admin/Perfil">Perfil</a>
            <a id="apartado-sesion" href="#" onclick="cerrarSesion()">Cerrar Sesión</a>


        </aside>
        <main>
            <div class="configuracion">
                <input id="btnEncabezados" value="Encabezados" type="button" /><br>
                <input id="btnServidor" value="Servidor de correo" type="button" />
            </div>
            <form id="correos" style="display:none;">
             
                <div class="campos-container">
                    <div class="datos">
                        <label>SMTP Host</label>
                        <label>Puerto</label>
                        <label style="margin-top: 8vh;">Encriptación</label>
                        <label>Correo remitente</label>
                        <label>Contraseña / Token</label>
                    </div>
                    <div class="editables" data-section="correo">
                        <div>
                            <input id="correoHost" type="text" value="@Model.Host" disabled />
                            <button data-input="correoHost" data-campo="host" class="btnEditarPerfil editarbtns" title="Editar">🖉</button>
                            <button type="button" class="GuardarPerfil editarbtns" style="display:none;">✔️</button>
                            <button type="button" class="CancelarPerfil editarbtns" style="display:none;">❌</button>
                        </div>
                        <div>
                            <input id="correoPuerto"  type="number" value="@Model.Puerto" disabled />
                            <button data-input="correoPuerto" data-campo="puerto" class="btnEditarPerfil editarbtns" title="Editar">🖉</button>
                            <button type="button" class="GuardarPerfil editarbtns" style="display:none;">✔️</button>
                            <button type="button"  class="CancelarPerfil editarbtns" style="display:none;">❌</button>
                        </div>
                        <div>
                            <select id="correoEncriptacion" disabled>
                                <option value="SSL" @(Model.Encriptacion == "SSL" ? "selected" : "")>SSL</option>
                                <option value="TLS" @(Model.Encriptacion == "TLS" ? "selected" : "")>TLS</option>
                                <option value="Ninguna" @(Model.Encriptacion == "Ninguna" ? "selected" : "")>Ninguna</option>
                            </select>
                            <button  data-input="correoEncriptacion" data-campo="encriptacion" class="btnEditarPerfil editarbtns" title="Editar">🖉</button>
                            <button type="button" class="GuardarPerfil editarbtns" style="display:none;">✔️</button>
                            <button type="button" class="CancelarPerfil editarbtns" style="display:none;">❌</button>
                        </div>
                        <div>
                            <input id="correoRemitente"  type="email" value="@Model.Remitente" disabled />
                            <button data-input="correoRemitente" data-campo="remitente" class="btnEditarPerfil editarbtns" title="Editar">🖉</button>
                            <button type="button" class="GuardarPerfil editarbtns" style="display:none;">✔️</button>
                            <button type="button" class="CancelarPerfil editarbtns" style="display:none;">❌</button>
                        </div>
                        <div>
                            <input id="correoToken"  type="password" value="@Model.Token" disabled />
                            <button data-input="correoToken" data-campo="token" class="btnEditarPerfil editarbtns" title="Editar">🖉</button>
                            <button type="button" class="GuardarPerfil editarbtns" style="display:none;">✔️</button>
                            <button type="button" class="CancelarPerfil editarbtns" style="display:none;">❌</button>
                        </div>
                    </div>
                </div>
            </form>

            <!--configurar encabezados-->
            <div id="minuta-config">
                <div>
                    <label>Logo</label><br>
                    <label for="img" class="upload-container">
                        <img style="height: 20vh; width: auto;" alt="Logo" title="Editar logo" src="/Modifi/logotec (weld).png">
                        <a class="material-symbols-outlined">add_photo_alternate</a>
                    </label>
                    <input type="file" id="img" style="display: none;">
                </div>
                <div>
                    <label>Encabezado</label><br>
                    <label for="img">
                        <span class="upload-container">
                            <img title="Editar encabezado" src="/Modifi/encabezado.png">
                            <a class="material-symbols-outlined">add_photo_alternate</a>
                        </span>
                    </label>
                    <input type="file" id="img" style="display: none;">
                </div>
                <div>
                    <label>Pie de página</label><br>
                    <label for="img">
                        <span class="upload-container">
                            <img title="Editar pie de página" src="/Modifi/encabezadoAbajo.png">
                            <a class="material-symbols-outlined">add_photo_alternate</a>
                        </span>
                    </label>
                    <input type="file" id="img" style="display: none;">
                </div>
                <div class="buttons" style="box-shadow: none;">
                    <input type="button" value="Guardar cambios">
                </div>
            </div>
        </main>
    </div>
    <script>
          const menu = document.querySelector('.menu');
        const sidebar = document.querySelector('.sidebar');
        const header =document.querySelector("header");
        const modEditCorreo =  document.querySelector("#modalEditarCorreo");

            // editar
        inicializarEditables('[data-section="perfil"]');
        inicializarEditables('[data-section="correo"]');

        function inicializarEditables(sectionSelector) {
            const seccion = document.querySelector(sectionSelector);
            if (!seccion) return;

            const botonesEditar = seccion.querySelectorAll(".btnEditarPerfil");

            botonesEditar.forEach(btn => {
                btn.addEventListener("click", (e) => {
                    e.preventDefault();
                    const campoId = btn.dataset.input;

                    seccion.querySelectorAll("input, select").forEach(input => {
                        input.disabled = true;
                        input.classList.remove("active");
                    });

                    seccion.querySelectorAll(".GuardarPerfil, .CancelarPerfil").forEach(b => b.style.display = "none");
                    seccion.querySelectorAll(".btnEditarPerfil").forEach(b => b.style.display = "inline");

                    const campo = document.getElementById(campoId);

                    //  Guarda el valor original solo si no ha sido guardado antes
                    if (!campo.dataset.original) {
                        campo.dataset.original = campo.value;
                    }

                    campo.disabled = false;
                    campo.classList.add("active");
                    campo.focus();

                    // mostrar botones de guardar y cancelar solo el clickeado
                    const divPadre = btn.closest("div");
                    btn.style.display = "none";
                    divPadre.querySelector(".GuardarPerfil").style.display = "inline";
                    divPadre.querySelector(".CancelarPerfil").style.display = "inline";
                });
            });
        }

        const btnEncabezados = document.getElementById('btnEncabezados');
        const btnServidor = document.getElementById('btnServidor');
        const vistaEncabezados = document.getElementById('minuta-config');
        const vistaServidor = document.getElementById('correos');

        function activar(botonActivo) {
        [btnEncabezados, btnServidor].forEach(b => b.classList.remove('activo'));
        botonActivo.classList.add('activo');
        }

        btnEncabezados.addEventListener('click', () => {
            vistaEncabezados.style.display = 'block';
            vistaServidor.style.display = 'none';
            activar(btnEncabezados);
        });

        btnServidor.addEventListener('click', () => {
            vistaEncabezados.style.display = 'none';
            vistaServidor.style.display = 'block';
            activar(btnServidor);
        });
        window.addEventListener('DOMContentLoaded', () => {
        vistaEncabezados.style.display = 'block';
        activar(btnEncabezados);
        });


          document.querySelector("#buscar").addEventListener("click",function (){
              console.log("sdfgh");
              header.classList.toggle("buscar");
          })
          //Sidebar
          menu.addEventListener('click', () => {
              sidebar.classList.toggle('active');
          });


          //CambioEnMovilDeminuta
          const Lista=document.querySelector('.minutas-list');
          const minutasContent=document.querySelector('.minuta-content');
          const minutas=document.querySelector('.minutas');

          // minutas.addEventListener('click',(e)=>{
          //     if(!e.target.classList.contains('filtros') && !e.target.parentElement.parentElement.classList.contains('filtros')  && !e.target.parentElement.classList.contains('filtros')){

          //         minutasContent.classList.toggle('active');
          //         console.log(e.target.parentElement.classList.contains('filtros'));
          //         Lista.classList.toggle('inactive');
          //     }
          // });




          history.pushState(null, "", location.href);

          window.addEventListener("popstate", function () {
              Lista.classList.toggle('inactive');
          console.log("Intento de salir con botón de retroceso");
          history.pushState(null, "", location.href); // Reagrega el estado para evitar la salida
          });



          document.addEventListener("click", function (event) {
        //      if (!minutasContent.contains(event.target) && !minutas.contains(event.target)) {
          //        minutasContent.classList.remove('active');
            //      minutas.classList.remove('inactive');
              //}
              if (!sidebar.contains(event.target ) && !menu.contains(event.target)) {
                  if (sidebar.classList.contains('active')) {
                      sidebar.classList.remove('active');
              console.log('click en sidebar');

                  }
              }
          });

          // document.getElementById("btnfiltros").addEventListener("click", function (e) {
          //     const filtrar = document.querySelector(".filtrar");
          //     e.target.classList.toggle("active");
          //     filtrar.classList.toggle("active");
          // });

           function cerrarSesion() {
                // Crea dinámicamente un formulario para enviar POST a /Account/Logout
                const form = document.createElement('form');
                form.method = 'POST';
                form.action = '/Account/Logout';

                // Agrega token antifalsificación
                const token = document.querySelector('meta[name="RequestVerificationToken"]')?.content;
                if (token) {
                    const input = document.createElement('input');
                    input.type = 'hidden';
                    input.name = '__RequestVerificationToken';
                    input.value = token;
                    form.appendChild(input);
                }

                document.body.appendChild(form);
                form.submit();
            }

             // Al hacer clic en "Guardar"
        document.querySelectorAll('.GuardarPerfil').forEach(btnGuardar => {
            btnGuardar.addEventListener('click', async e => {
                e.preventDefault();
                const div = btnGuardar.parentElement;
                const input = div.querySelector('input, select');
                const campo = div.querySelector('.btnEditarPerfil').dataset.campo;
                const valor = input.value;

                try {
                    const response = await fetch('/Admin/Configuracion/GuardarCampoCorreo', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ campo, valor })
                    });

                    if (!response.ok) throw new Error('Error al guardar');

                    const data = await response.json();
                    alert(data.mensaje);

                    // Desactiva input y actualiza el valor original
                    input.disabled = true;
                    input.classList.remove("active");
                    input.dataset.original = input.value;

                    btnGuardar.style.display = 'none';
                    div.querySelector('.CancelarPerfil').style.display = 'none';
                    div.querySelector('.btnEditarPerfil').style.display = 'inline';

                } catch {
                    alert('Error al guardar campo');
                }
            });
        });

        // Al hacer clic en "Cancelar"
        document.querySelectorAll('.CancelarPerfil').forEach(btn => {
            btn.addEventListener('click', e => {
                e.preventDefault();
                const div = btn.parentElement;
                const input = div.querySelector('input, select');

                // Restaurar el valor original si existe
                if (input && input.dataset.original !== undefined) {
                    input.value = input.dataset.original;
                }

                input.disabled = true;
                input.classList.remove("active");

                btn.style.display = 'none';
                div.querySelector('.GuardarPerfil').style.display = 'none';
                div.querySelector('.btnEditarPerfil').style.display = 'inline';
            });
        });
    </script>
</body>
